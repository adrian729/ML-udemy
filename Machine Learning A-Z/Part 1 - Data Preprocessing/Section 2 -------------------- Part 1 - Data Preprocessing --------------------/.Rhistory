#!/usr/bin/env Rscript
checkAndInstallCRAN <- function(packageName) {
if(packageName %in% rownames(installed.packages()) == FALSE) {
install.packages(packageName, repos = "http://cran.us.r-project.org");
}
else {
mssg <- c("Package", packageName, "already installed.")
print(paste(mssg, collapse=" "))
}
}
checkAndInstallCRAN('RMySQL')
checkAndInstallCRAN('mongolite')
checkAndInstallCRAN('jsonlite')
library(RMySQL)
library(mongolite)
prod = TRUE
mongo.host = ifelse(prod, 'mongodb://colosus.fib.upc.edu:27017', 'mongodb://localhost')
#library(timeit) # To mesure the time spent gathering the JSON files
mysql_conn = dbConnect(MySQL(), user='learning', password='0TiwJUWy', dbname='DBlearning', host='westeros.fib.upc.edu', port=3306)
#mysql_conn = dbConnect(MySQL(), user='learning', password='0TiwJUWy', dbname='DBlearning', host='localhost', port=4040) # Se utiliza el puerto 4040 para pasar por la aplicacion de monitorizacion de la bd
# jsonlite to create the JSON for MongoDB
library(jsonlite)
### I4: Indicador 04 (Temps dedicat)
print("-- I4")
sql <- "SELECT cs.courseid AS ci, m.moduleid AS mi, m.moduleName AS mn, m.moduleType AS mt, m.availabilityTimestampR AS ma, cs.studentid AS si, cs.groupid AS gi, cs.namegroup AS gn FROM CourseStudent AS cs LEFT JOIN Modules AS m ON cs.courseid = m.courseid ORDER BY cs.courseid, m.moduleid, cs.studentid;"
I4s_partial <- dbGetQuery(mysql_conn, sql)
# Converts factors in a data frame to strings or integers. It also forces the characters to be encoded in UTF-8
from_factors <- function(x) {
x <- iconv(as.character(x), to = "UTF-8")
if (suppressWarnings(all(!is.na(as.integer(as.character(x))))))
x <- as.integer(x)
x
}
View(I4s_partial)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
prova <- completeFun(I4s_partial, c("ci", "mi", "si", "gi"))
View(prova)
# Dates as a list
retrieveTimeSpent <- function(row) {
row <- as.data.frame(t(data.frame(row)))
if(mi ) {
sql <- with(row, sprintf("SELECT fs.courseid as courseid, fs.studentid as studentid, fs.moduleid as moduleid, sum(totalMinutesC) as ts FROM FactStudent fs LEFT JOIN Modules m ON fs.moduleid = m.moduleid WHERE fs.courseid = %s AND fs.studentid = %s AND fs.moduleid  = %s AND fs.studentid != 1 GROUP BY fs.courseid, moduleid, studentid ORDER BY fs.moduleid, fs.studentid", ci, si, mi))
}
ts_row <- dbGetQuery(mysql_conn, sql)
row[] <- lapply(row, from_factors)
df <- row
df["ts"] = ifelse(length(row.names(ts_row)) == 0, 0.0, ts_row["ts"]) # Forcing to be a double value
# Insert data frame into collection. One doc per row
mongo_I4 = mongo(collection = "I4", db = 'LADB', url = mongo.host)
row.names(df) <- NULL
mongo_I4$insert(df)
NULL
}
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
I4s_partial <- completeFun(I4s_partial, c("ci", "mi", "si", "gi"))
apply(I4s_partial, 1, retrieveTimeSpent)
# Dates as a list
retrieveTimeSpent <- function(row) {
row <- as.data.frame(t(data.frame(row)))
sql <- with(row, sprintf("SELECT fs.courseid as courseid, fs.studentid as studentid, fs.moduleid as moduleid, sum(totalMinutesC) as ts FROM FactStudent fs LEFT JOIN Modules m ON fs.moduleid = m.moduleid WHERE fs.courseid = %s AND fs.studentid = %s AND fs.moduleid  = %s AND fs.studentid != 1 GROUP BY fs.courseid, moduleid, studentid ORDER BY fs.moduleid, fs.studentid", ci, si, mi))
ts_row <- dbGetQuery(mysql_conn, sql)
row[] <- lapply(row, from_factors)
df <- row
df["ts"] = ifelse(length(row.names(ts_row)) == 0, 0.0, ts_row["ts"]) # Forcing to be a double value
# Insert data frame into collection. One doc per row
mongo_I4 = mongo(collection = "I4", db = 'LADB', url = mongo.host)
row.names(df) <- NULL
mongo_I4$insert(df)
NULL
}
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
I4s_partial <- completeFun(I4s_partial, c("ci", "mi", "si", "gi"))
apply(I4s_partial, 1, retrieveTimeSpent)
source('~/Learning Analytics/scripts/SQLtoMongo.R')
print("Hello World!")
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
setwd("~/Udemy/ML-udemy/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
# Importing the dataset
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
split = sample.split(dataset$DependentVariable, SplitRatio = 0'8)
.
a
a)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
''
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
split = sample.split(dataset$DependentVariable, SplitRatio = 0)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
View(dataset)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(training_set)
setwd("~/Udemy/ML-udemy/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Feature Scaling
training_set[2:3] = scale(training_set[2:3])
test_set[2:3] = scale(test_set[2:3])
View(test_set)
View(training_set)
